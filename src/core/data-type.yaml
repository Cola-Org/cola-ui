- name: cola.DataType
  stereotype: class
  super: cola.Definition
  label: 各种DataType的抽象类
  description: |
    其最主要的实现类是<a href="cola.Definition.html">cola.Definition</a>。

    Cola中有一些默认提供的DataType：
    <ul>
      <li>string  - 字符串类型。</li>
      <li>int - 整数类型。</li>
      <li>float - 浮点类型。</li>
      <li>number  - 数字类型，目前相当于浮点类型。</li>
      <li>boolean - 逻辑型。</li>
      <li>date  - 日期时间类型。</li>
      <li>json  - 表示该属性中的数值是纯JSON，这样Cola就不会尝试将这些数据转换成Entity和EntityList。
      否则在默认情况下，我们向一个Entity属性中设置一个JSON或JSON的数组，再一次从中获取内容时得到的将是Entity和EntityList。</li>
      <li>entity  - 表示该属性中的数值是数据实体。即允许Cola自动将JSON数据转换成Entity和EntityList。
      虽然Cola默认的的处理机制就是会做这样的转换，但是作此设定还是会在某些情况下带来不同。
      比如当我们设置一个空数组到某属性中时，由于数组中没有任何元素，因此Cola无法判断根据元素的类型是否需要进行转换，
      那么在使用此种DataType的情况，Cola会将其转换成一个空的EntityList。</li>
    </ul>

- name: cola.EntityDataType
  stereotype: class
  super: cola.DataType
  label: 实体数据类型
  description: |
    即用于描述Entity型数据的数据类型。此种数据类型最主要的作用是利用其中的properties来描述Entity的某些属性。

  attributes:
    - name: properties
      type: json || [json] || cola.util.KeyedArray
      label: 属性描述的集合
      description: |
        此Attribute在执行set或get时，接受和返回的数据类型是不同的。
        在set时，此属性接受的是JSON描述对象或JSON的数组，用于初始化其中的属性描述。
        例如我们可以这样来初始化两个属性描述：
        <code>
        dataType.set("properties", {
          name: { label: "姓名", dataType: "string" },
          age: { label: "年龄", dataType: "number" }
        });
        <code>
        上面的代码也可以替换成下面这种形式：
        </code>
        dataType.set("properties", [
          { property:"name", label: "姓名", dataType: "string" },
          { property:"age", label: "年龄", dataType: "number" }
        ]);
        </code>
        在get时，我们从此Attribute中读取到的会是一个cola.util.KeyedArray对象，利用此种对象我们可以比较方便的根据属性名来获取各个属性描述对象，
        也可以按照顺序迭代出其中的每一个属性描述对象。

  methods:
    - name: addProperty
      type: cola.Property
      label: 添加一个属性描述
      arguments:
        - name: propertyConfig
          type: json
          label: 属性描述的JSON配置对象

    - name: removeProperty
      type: cola.Property
      label: 根据属性名删除一个属性描述
      arguments:
        - name: property
          type: string
          label: 属性名

    - name: getProperty
      type: cola.Property
      label: 根据属性名返回一个属性描述
      arguments:
        - name: property
          type: string
          label: 属性名

    - name: getProperties
      type: cola.util.KeyedArray
      label: 根据所有属性描述
      description: 此方法等同于get("properties")

- name: cola.Property
  stereotype: class
  super: cola.Definition
  label: 属性描述
  description: |
    用于描述一个Entity属性的数据类型、校验规则等的对象。

  attributes:
    - name: property
      type: string
      label: 属性名

    - name: owner
      type: cola.EntityDataType
      label: 该属性描述所属的EntityDataType

    - name: caption
      type: string
      label: 属性的标题，即用于显示的名称

    - name: defaultValue
      type: any
      label: 属性的默认值

    - name: required
      type: boolean
      label: 属性的是否必须有值

    - name: dataType
      type: string || json || cola.DataType
      label: 属性的数据类型
      description: |
        此Attribute在get和set时可以使用不同的类型的参数。

        get时此Attribute总是返回DataType的实例。

        set时可以下列的两种取值：
        <ul>
          <li>使用string，该string将被认作是DataType的name属性，此时Cola会在当前Model中查找同名的DataType并将其作为此属性的DataType。</li>
          <li>使用JSON配置对象，表示直接利用此JSON配置对象创建一个新的DataType并勇气作为属性的DataType。</li>
        </ul>

    - name: aggregated
      type: boolean
      label: 是否集合类型
      description: |
        通常，假设当我们设置一个person属性的类型为Person，无论我们向Entity的person属性中设置一个Entity还是一个EntityList都是可被接受的。
        但是在某些情况下Cola可能无法自行判断应该按照哪种方式来处理，或者其采取的处理方式可能与我们的预期并不一致。

        例如，假设Entity的person属性目前为空，当我们调用Entity.createChild("person", {...})向person属性中添加一个对象时，
        Cola无法判断应该向其中直接添加一个Person，还是首先创建一个EntityList并将新的Entity添加到该EntityList中。
        为了区分这种情况，我们需要用到aggregated。

        此Attribute的值为undefined/true/false时会得到三种不同的处理结果。
        <ul>
          <li>默认情况，当值为undefined时Cola会尝试进行自动判断。</li>
          <li>当值为true，表示该属性只接收集合类型，即该属性的内容是EntityList。</li>
          <li>当值为false，表示该属性只接收单一的Entity。</li>
        </ul>

    - name: provider
      type: string || json || cola.Provider
      label: 属性的数据提供者
      description: |
        利用此Attribute可以定义具有懒装载特性的属性，此Attribute在get和set时可以使用不同的类型的参数。

        get时此Attribute总是返回Provider对象的实例。

        set时可以下列的两种取值：
        <ul>
          <li>使用string，该string将被认作是Provider的url属性，此时Cola会直接创建一个新的Provider，其url属性的值为该stirng。</li>
          <li>使用JSON配置对象，表示直接利用此JSON配置对象创建一个新的Provider。</li>
        </ul>

    - name: validators
      type: string || function || json || [json] || [cola.Validator]
      label: 属性的数据校验器
      description: |
        此Attribute在get和set时可以使用不同的类型的参数。

        get时此Attribute总是返回数据校验器的数组。

        set时可以下列的几种取值：
        <ul>
          <li>使用string，此时该string会被认为是数据校验器的$type。Cola会直接根据此$type创建一个新的校验器。</li>
          <li>使用funciton，Cola会认为您将要定义一个<a href="cola.CustomValidator.html">cola.CustomValidator</a>，
          并将此function作为CustomValidator的func。</li>
          <li>使用json或[json]，Cola会根据这些JSON配置对象创建一个或多个数据校验器。</li>
        </ul>

    - name: rejectInvalidValue
      type: boolean
      label: 是否拒绝未通过校验的数据进入Entity
      description: |
        默认情况下Cola并不会阻止未通过校验的数据设置进Entity，而是会将整个Entity标记为未通过校验的状态。
        用户可以在界面上看到那些数据未通过校验并尝试修正他们，我们认为这样的方式有助于改善界面的操作体验。
        但在部分情况下，您可能希望直接拒绝这些不正确的数据设置进Entity，此时可以将rejectInvalidValue设置为true。