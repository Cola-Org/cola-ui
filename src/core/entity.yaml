- name: cola.Entity
  stereotype: class
  label: 数据实体

  constructors:
    - arguments:
        - name: data
          type: json
          optional: true
          label: 以JSON方式定义的初始化数据
        - name: dataType
          type: cola.EntityDataType
          optional: true
          label: DataType

  properties:
    - name: STATE_NONE
      type: string
      static: true
      label: Entity的状态 - 无状态
    - name: STATE_NEW
      type: string
      static: true
      label: Entity的状态 - 新增状态
    - name: STATE_MODIFIED
      type: string
      static: true
      label: Entity的状态 - 被修改状态
    - name: STATE_DELETED
      type: string
      static: true
      label: Entity的状态 - 被删除状态

    - name: state
      type: string
      label: Entity的状态
      description: |
        该状态目前有四种可能的取值：
        <ul>
          <li>NONE - 无状态</li>
          <li>NEW - 新增状态</li>
          <li>MODIFIED - 被修改状态</li>
          <li>DELETED - 被删除状态</li>
        </ul>
        参考: <a href="#method:setState">setState(state)</a>

    - name: dataType
      type: cola.EntityDataType
      label: DataType

  methods:
    - name: hasValue
      type: boolean
      label: 判断某属性中是否有值
      arguments:
        - name: prop
          type: string
          label: 属性名

    - name: get
      type: any
      label: 获取一个属性的值
      description: |
        当一个属性的值是懒装载的，那么在我们通过get()方法尝试从此属性中读取内容时，Cola会利用loadMode参数的值来确定要如何来装载尚未装载的数据。
      arguments:
        - name: prop
          type: string
          label: 属性名或路径
        - name: loadMode
          type: string | function | Object
          defaultValue: async
          optional: true
          label: 懒加载属性的装载模式，默认值为async。
          description: |
            该装载模式目前有四种可能的取值：
            <ul>
              <li>async - 异步装载模式</li>
              <li>sync - 同步装载模式</li>
              <li>never - 不装载</li>
              <li>传入一个回调方法，相当于按照异步模式装载。</li>
            </ul>

    - name: getAsync
      type: Deferred
      label: 以异步方式获取一个属性的值
      description: |
        该方法返回一个Deferred对象用于方便我们获得异步调用的返回结果，关于Deferred对象的详细说明请参考
        <a href="//api.jquery.com/jquery.deferred/">//api.jquery.com/jquery.deferred/</a>。
        <p>
        示例如下...
        <code>
        entity.getAsync("detail").done(function(detail) {
          // 此处我们得到了detail的值
        });
        </code>
        </p>
      arguments:
        - name: prop
          type: string
          label: 属性名或路径
        - name: callback
          type: function
          optional: true
          label: 回调函数
          description: 建议使用此方法返回的Deferred对象代替此回调函数。

    - name: set
      type: cola.Entity
      label: 设置一个属性的值
      arguments:
        - name: name
          type: string
          label: 属性名或路径
        - name: value
          type: any
          label: 数据

    - name: set
      type: cola.Entity
      label: 设置一批属性的值
      arguments:
        - name: data
          type: json
          label: 以JSON方式定义的一批属性值

    - name: remove
      type: cola.Entity
      label: 删除当前Entity。
      description: |
        如果这个Entity此时是另一个父Entity的某属性值，或者它正隶属于某个EntityList。
        那么，此操作也会将此Entity从父Entity或EntityList中移除。
      arguments:
        - name: detach
          type: boolean
          optional: true
          label: 是否强制删除
          description: |
            如果启用这个属性，那么这个Entity的删除操作会将改Entity彻底从抹除，并且更改Entity的state，
            这样，这个Entity也将不会出现在后续的数据提交操作中，Server是无法直接感知这一删除动作的。

    - name: createChild
      type: cola.Entity
      label: 在某个属性中创建一个新的子Entity并返回。
      description: |
        如果之前已经通过DataType声明了相应子属性的DataType，那么新创建的子Entity将是与该DataTypre匹配的。
        同时，如果该属性的声明中已将aggregated设置为true，那么这一操作会在该属性中先创建一个EntityList（如果属性原本为空的话），
        然后再将新的Entity插入到这个EntityList中。
      arguments:
        - name: prop
          type: string
          label: 属性名
        - name: data
          type: json
          optional: true
          label: 以JSON方式定义的一批属性值，用于初始化新Entity中的数据。此参数可省略。

    - name: createBrother
      type: cola.Entity
      label: 创建一个兄弟Entity并返回。
      description: |
        此方法首先会创建一个与当前Entity类型相同的新Entity，如果当前Entity隶属于某个EntityList，那么新创建的Entity还会被自动添加到EntityList中。
      arguments:
        - name: data
          type: json
          optional: true
          label: 以JSON方式定义的一批属性值，用于初始化新Entity中的数据。此参数可省略。

    - name: setCurrent
      type: cola.Entity
      label: 将该Entity设置为当前Entity。
      description: |
        此方法首先会创建一个与当前Entity类型相同的新Entity，如果当前Entity隶属于某个EntityList，那么新创建的Entity还会被自动添加到EntityList中。
      arguments:
        - name: tree
          type: boolean
          optional: true
          label: 是否不断的向上迭代将每一级上层Entity设置为所属的EntityList的当前Entity。

    - name: setState
      type: cola.Entity
      label: 设置Entity的状态
      description: |
        该状态有四种取值:
        <ul>
          <li>NONE - 无状态</li>
          <li>NEW - 新增状态</li>
          <li>MODIFIED - 被修改状态</li>
          <li>DELETED - 被删除状态</li>
        </ul>
        参考: <a href="#property:state">state</a>
      arguments:
        - name: state
          type: string

    - name: getOldValue
      type: any
      label: 返回某属性的旧值
      description: |
        即返回某属性修改之前的值。如果当前Entity并不处于modified状态，那么此方法将返回undefined。
      arguments:
        - name: prop
          type: string
          label: 属性名

    - name: cancel
      type: cola.Entity
      label: 将某个属性的属性值还原成初始值。
      description: |
        此处的初始值是指从Server端装载到的值或者成功执行完最后一次数据提交之后的值。
      arguments:
        - name: prop
          type: string
          label: 属性名

    - name: cancel
      type: cola.Entity
      label: 将所有属性的值还原成初始值。
      description: |
        此处的初始值是指从Server端装载到的值或者成功执行完最后一次数据提交之后的值。

    - name: reset
      type: cola.Entity
      label: 重置某个属性
      description: |
        清除该属性的值和相关的校验信息，但此种清除并不会导致Entity的状态发生改变。
      arguments:
        - name: prop
          type: string
          label: 属性名

    - name: reset
      type: cola.Entity
      label: 重置整个Entity
      description: |
        清除整个Entity中的所有数据和校验信息并重置整个Entity的状态。

    - name: resetState
      type: cola.Entity
      label: 清除所有校验信息并重置整个Entity的状态

    - name: getDataType
      type: cola.DataType
      label: 根据路径查找并返回DataType。
      description: |
        如果没有定义path参数，那么此方法会直接返回当前Entity的DataType。
        如果定义了path参数，那么此方法会根据这个路径返回相应子属性或子对象的DataType。
      arguments:
        - name: path
          type: string
          label: 属性名或路径
          optional: true

    - name: getPath
      type: [string]
      label: 返回当前Entity的数据路径

    - name: flush
      type: Deferred
      label: 刷新某个属性的数据
      description: |
        此方法只有在该属性的数据是通过cola.Provider获取的情况下是有效的，即通知Cola清空该属性的数据并重新利用Provider获取。
        该方法返回一个Deferred对象用于方便我们获得异步调用的返回结果，关于Deferred对象的详细说明请参考
        <a href="//api.jquery.com/jquery.deferred/">//api.jquery.com/jquery.deferred/</a>。
        <p>
        示例如下...
        <code>
        entity.flush("detail").done(function(detail) {
          // 此处我们得到了detail的值
        });
        </code>
        </p>
      arguments:
        - name: prop
          type: string
          label: 属性名
        - name: loadMode
          type: string | function | object
          defaultValue: async
          optional: true
          label: 懒加载属性的装载模式，默认值为async。
          description: |
            该装载模式目前有四种可能的取值：
            <ul>
              <li>async - 异步装载模式</li>
              <li>sync - 同步装载模式</li>
              <li>never - 不装载</li>
              <li>传入一个回调方法，相当于按照异步模式装载。建议您以Deferred方式替代回调方法。</li>
            </ul>

    - name: disableObservers
      type: cola.Entity
      label: 禁止Entity向观察者发送消息
      description: |
        参考 <a href="cola.Model.html:method:disableObservers">cola.Model.disableObservers()</a>

    - name: enableObservers
      type: cola.Entity
      label: 允许Entity向观察者发送消息
      description: |
        参考 <a href="cola.Model.html:method:disableObservers">cola.Model.disableObservers()</a>

    - name: notifyObservers
      type: cola.Entity
      label: 向Entity的观察者发送一个刷新消息

    - name: disableValidators
      type: cola.Entity
      label: 禁止Entity中的所有校验器

    - name: enableValidators
      type: cola.Entity
      label: 启用Entity中的所有校验器

    - name: validate
      type: boolean
      label: 校验当前Entity中的数据并返回是否校验通过

    - name: validate
      type: boolean
      label: 校验当前Entity中的某个属性的值并返回是否校验通过
      arguments:
        - name: prop
          type: string
          label: 属性名

    - name: addMessage
      type: cola.Entity
      label: 向Entity中添加一条或多条消息。
      description: |
        此处的消息是指一个Entity或者某个属性上的附加信息，通常是一些校验信息。
        <p>
        每一条消息是一个JSON对象，其中包含一下个子属性：
        <ul>
          <li>type - 消息的类型。目前包含error、warn、info三种类型。</li>
          <li>text - 消息的文本。</li>
          <li>sticky - 是否具有粘性。逻辑值，可以为空。用于标识此条消息是否可以被clearMessages()方法清除。</li>
        </ul>
        </p>
      arguments:
        - name: property
          type: string
          label: 属性名
        - name: message
          type: string || [string] || json || [json]
          label: 要添加的消息
          description: |
            定义一个消息时，我们可以简单的使用一个字符串来声明一个消息。
            Cola会自动将这段字符串当做消息的text，并且将这个新消息的type设定为error。
            此方法也支持利用数组快速的添加多个消息。

    - name: getKeyMessage
      type: json
      label: 返回当前Entity中级别最高的一条消息，包含属性下的消息。
      description: |
        Cola比较消息的级别时按照error高于warn高于info的标准，例如当一个Entity同时拥有一条error消息和一条info消息时，
        getKeyMessage()会返回那条error消息。

    - name: getKeyMessage
      type: json
      label: 返回当前Entity中某个属性下级别最高的一条消息
      arguments:
        - name: property
          type: string
          label: 属性名

    - name: getMessages
      type: [json]
      label: 返回当前Entity中所有的消息，包含属性下的消息。

    - name: getMessages
      type: [json]
      label: 返回当前Entity中某个属性下所有的消息
      arguments:
        - name: property
          type: string
          label: 属性名

    - name: clearMessages
      type: cola.Entity
      label: 清除当前Entity下的消息，不包含那些特定属性下的消息。
      arguments:
        - name: property
          type: string
          label: 属性名
          description: |
            如果传null，表示清除整个Entity中的所有消息，包含那些属性下的消息。
            如果传某个具体的属性名，表示清除该属性下的消息。
        - name: force
          type: boolean
          optional: true
          label: 是否清除具有粘性的消息
          description: |
            默认情况下clearMessages()方法并不清除粘性消息，即那些sticky为true的消息。
            如果设定此参数为true，那么粘性消息也将被一并清除。

    - name: toJSON
      type: json
      label: 将Entity转换成一个JSON对象
      arguments:
        - name: options
          type: json
          label: 选项
          optional: true
          properties:
            - name: deleted
              type: boolean
              label: 是否转换那些被标为已删除的Entity
            - name: state
              type: boolean
              label: 是否转换Entity的状态
            - name: oldData
              type: boolean
              label: 是否转换旧值
              description: |
                如果启用此选项Cola会将所有旧值转换成一个JSON对象并存入名为 oldData$ 的子属性中。
            - name: simpleValue
              type: boolean
              label: 是否值转换简单值
              description: |
                简单值是指string、number、boolean、date这样写数值。
            - name: nullValue
              type: boolean
              label: 是否将值为null的属性生成到JSON中

- name: cola.EntityList
  stereotype: class
  label: 数据实体集合
  description: |
    关于EntityList的分页功能，此处需要特别做些说明。EntityList除了有一个pageCount属性之外，还有一个叫pageCountDetermined的属性。
    Provider返回集合型数据时有3种方式来支持分页：
    <ul>
    <li>
    返回一个JSON而不是Array。
    JSON中的$data用来放当前页的数据，它是一个数组，
    再通过这个JSON中的$totalEntityCount属性来声明集合的总记录数（不是指当前页的记录数）。
    完成第一次的数据装载之后，EntityList就已经得到了确定的pageCount和totalEntityCount，同时pageCountDetermined也将变成true。
    </li>
    <li>
    如果设置了Provider的detectEnd属性为true，那么Provider会自动尝试向后端多请求一条记录。
    比如我们设置pageSize为10，当前加载第3页，那么Provider实际向后端发出的请求中的from和limit参数将是20和11。
    此时后端只需要直接向前台返回数组即可，前台根据获得的结果是否足够11条，来确定是否还存在下一页。
    在还没有加载到最后一页之前，EntityList并不知道确定的pageCount和totalEntityCount，pageCountDetermined的值也是false。
    当装载到最后一页时才能确定pageCount和totalEntityCount，并且将pageCountDetermined变为true。
    </li>
    <li>
    如果不设置Provider的detectEnd属性为true，那么Provider不会通过多请求一条记录的方式来提前判断是否存在下一页。
    因此在最后一页的记录数刚好等于pageSize时，EntityList仍会以为存在下一页数据。这在部分场景下并不会存在问题。
    只有当装载某一页数据时记录数小于pageSize时，才能确定pageCount和totalEntityCount，并且将pageCountDetermined变为true。
    </li>
    </ul>

  constructors:
    - arguments:
        - name: array
          type: array
          optional: true
          label: 以JSON数组方式定义的初始化数据
        - name: dataType
          type: cola.EntityDataType
          optional: true
          label: DataType

  properties:
    - name: current
      type: cola.Entity
      label: 当前Entity
      description: |
        EntityList总是会尝试维护一个当前Entity，默认情况下它是EntityList中的第一个Entity。

    - name: entityCount
      type: number
      label: 当前EntityList中子Entity的数量
      description: |
        注意此数量是不包含那些已被标记为deleted的Entity的。

    - name: pageSize
      type: number
      label: 分页大小，即每页的条目数。

    - name: pageNo
      type: number
      label: 当前页的页号，从1开始计数。

    - name: pageCount
      type: number
      label: 总的页数

    - name: pageCountDetermined
      type: boolean
      label: 总页数是否是你一个已经确定的值。
      description: |
        默认情况下pageCountDetermined为false，此时Cola不认为pageCount属性标示的是真实的总页数，它只代表当前EntityList已经装载的页数。
        即默认Cola总是认为当前EntityList的最后一页之后可能存在下一页的数据可被装载的。
        在下列两种情况下，Cola会将pageCountDetermined设置为true...
        <ul>
          <li>某一次装载下一页数据时，得到的数据量少于pageSize，此时Cola认为本次装载的是EntityList的最后一页。</li>
          <li>
          装载下一页数据时，Server端返回的数据中包含entityCount的定义，此时Cola会根据此entityCount计算中总的页数。
          在返回数据中指定entityCount的形式如下：
          <code>
          {
            $entityCount: 1000,
            $data: [  // 实际的分页数据
              { ... },
              { ... },
              { ... },
              { ... },
              ...
            ]
          }
          </code>
          </li>
        </ul>

    - name: totalEntityCount
      type: number
      label: 总的Entity数量。
      description: |
        entityCount用于表示EntityList中当前实际有多少个Entity，不包含尚未下载的。而totalEntityCount则是包含尚未下载的Entity的总数量。
        totalEntityCount有时并不是一个准确的或者确定的数字，这取决于Server端返回的数据中有没有包含entityCount的定义。
        如果没有，那么我们通过totalEntityCount拿到的只是根据页数和每页记录数估算出来的一个数字。

  methods:
    - name: fillData
      type: cola.EntityList
      label: 利用数组填充当前页的数据
      arguments:
        - name: array
          type: string
          label: 以JSON数组方式定义的数据

    - name: hasNextPage
      type: boolean
      label: 当前页之后是否还有下一页的数据
      description: |
        例如当我们用EntityList显示一个列表，当用户滚动到最后一行之后，Cola内部依此方法的返回结果判断是否需要尝试装载下一页的数据。
        参考: <a href="#property:pageCountDetermined">pageCountDetermined</a>

    - name: loadPage
      type: cola.EntityList
      label: 装载指定页的数据
      arguments:
        - name: pageNo
          type: mnumber
          label: 要装载的页号
        - name: loadMode
          type: string
          defaultValue: async
          optional: true
          label: 装载模式
          description: |
            该装载模式目前有四种可能的取值：
            <ul>
              <li>async - 异步装载模式</li>
              <li>sync - 同步装载模式</li>
              <li>never - 不装载</li>
              <li>传入一个回调方法，相当于按照异步模式装载。</li>
            </ul>

    - name: gotoPage
      type: cola.EntityList
      label: 跳转到指定的页
      arguments:
        - name: pageNo
          type: mnumber
          label: 要前往的页号
        - name: loadMode
          type: string
          defaultValue: async
          optional: true
          label: 装载模式。参考：<a href="#method:loadPage">loadPage</a>

    - name: firstPage
      type: cola.EntityList
      label: 跳转到第一页
      arguments:
        - name: loadMode
          type: string
          defaultValue: async
          optional: true
          label: 装载模式。参考：<a href="#method:loadPage">loadPage</a>

    - name: previousPage
      type: cola.EntityList
      label: 跳转到上一页
      arguments:
        - name: loadMode
          type: string
          defaultValue: async
          optional: true
          label: 装载模式。参考：<a href="#method:loadPage">loadPage</a>

    - name: nextPage
      type: cola.EntityList
      label: 跳转到下一页
      arguments:
        - name: loadMode
          type: string
          defaultValue: async
          optional: true
          label: 装载模式。参考：<a href="#method:loadPage">loadPage</a>

    - name: lastPage
      type: cola.EntityList
      label: 跳转到最后一页
      arguments:
        - name: loadMode
          type: string
          defaultValue: async
          optional: true
          label: 装载模式。参考：<a href="#method:loadPage">loadPage</a>

    - name: insert
      type: cola.Entity
      label: 向EntityList中添加一个Entity
      description: |
        在实际使用过程中，向EntityList中插入数据的方法很多。很多时候用其他方法来完成这一操作会让代码看起来更加简洁明了。
        请参考：
        <ul>
          <li><a href="cola.Entity.html#method:createChild">Entity.createChild()</a></li>
          <li><a href="cola.Entity.html#method:createBrother">Entity.createBrother()</a></li>
        </ul>
      arguments:
        - name: entity
          type: json | cola.Entity
          optional: true
          label: 要添加的Entity
          description: |
            如果向此参数中传入一个JSON对象，那么Cola会自动将其转换成cola.Entity的实例。
        - name: index
          type: number
          optional: true
          label: 插入位置

    - name: remove
      type: cola.Entity
      label: 从EntityList中删除一个Entity
      description: |
        在实际使用过程中，建议您直接使用<a href="cola.Entity.html#method:remove">Entity.remove()</a>来完成这一操作。
      arguments:
        - name: entity
          type: cola.Entity
          optional: true
          label: 要删除的Entity
          description: |
            如果不指定此参数则表示要删除EntityList中的当前Entity。
        - name: detach
          type: boolean
          optional: true
          label: 是否要将该Entity从该EntityList中彻底移除
          description: |
            在默认情况下，当我们从EntityList和删除一个Entity时，Cola只是将它的状态修改为delete，并没有真正的把它从EntityList中移除掉。
            这样当我们对这个EntityList做提交时，我们还可以从中遍历出哪些Entity是需要在Server端做删除处理的。
            如果将此参数设置为true，那么该Entity会在删除是彻底中EntityList中移除。

    - name: setCurrent
      type: cola.EntityList
      label: 将某个Entity设定为EntityList的当前Entity
      arguments:
        - name: entity
          type: cola.Entity
          label: 要设定的当前Entity

    - name: first
      type: cola.Entity
      label: 将EntityList中的第一个Entity设定为当前Entity

    - name: previous
      type: cola.Entity
      label: 将当前Entity的前一个Entity设定为当前Entity

    - name: previous
      type: cola.Entity
      label: 将当前Entity的下一个Entity设定为当前Entity

    - name: last
      type: cola.Entity
      label: 将EntityList中的最后一个Entity设定为当前Entity

    - name: getPath
      type: [string]
      label: 返回当前EntityList的数据路径

    - name: empty
      type: cola.EntityList
      label: 清除当前EntityList中的所有Entity
      description: |
        注意此方法并不会改变这些Entity的状态。

    - name: flush
      type: Deferred
      label: 重新装载该EntityList中的数据
      description: |
        此方法只有在该EntityList是通过cola.Provider获取的情况下是有效的，即通知Cola清空该EntityList中所有的数据并重新利用Provider获取。
        该方法返回一个Deferred对象用于方便我们获得异步调用的返回结果，关于Deferred对象的详细说明请参考
        <a href="//api.jquery.com/jquery.deferred/">//api.jquery.com/jquery.deferred/</a>。
        <p>
        示例如下...
        <code>
        entity.flush("detail").done(function(detail) {
          // 此处我们得到了detail的值
        });
        </code>
        </p>
      arguments:
        - name: loadMode
          type: string | function | object
          defaultValue: async
          optional: true
          label: 懒加载属性的装载模式，默认值为async。
          description: |
            该装载模式目前有四种可能的取值：
            <ul>
              <li>async - 异步装载模式</li>
              <li>sync - 同步装载模式</li>
              <li>never - 不装载</li>
              <li>传入一个回调方法，相当于按照异步模式装载。建议您以Deferred方式替代回调方法。</li>
            </ul>

    - name: disableObservers
      type: cola.EntityList
      label: 禁止EntityList向观察者发送消息
      description: 参考 <a href="cola.Model.html:method:disableObservers">cola.Model.disableObservers()</a>

    - name: enableObservers
      type: cola.EntityList
      label: 允许EntityList向观察者发送消息
      description: 参考 <a href="cola.Model.html:method:disableObservers">cola.Model.disableObservers()</a>

    - name: notifyObservers
      type: cola.EntityList
      label: 向Entity的观察者发送一个刷新消息

    - name: toJSON
      type: [json]
      label: 将EntityList转换成一个JSON对象的数组
      arguments:
        - name: options
          type: json
          label: 选项
          optional: true
          properties:
            - name: deleted
              type: boolean
              label: 是否转换那些被标为已删除的Entity
            - name: entityId
              type: boolean
              defaultValue: true
              label: 是否在最终的JSON中生成Entity在当前页面中的内部唯一ID，该ID会被保存在一个名为 entityId$ 的特殊属性中。
            - name: state
              type: boolean
              defaultValue: true
              label: 是否转换Entity的状态
            - name: oldData
              type: boolean
              label: 是否转换旧值
              description: |
                如果启用此选项Cola会将所有旧值转换成一个JSON对象并存入名为 oldData$ 的子属性中。
            - name: simpleValue
              type: boolean
              label: 是否值转换简单值
              description: |
                简单值是指string、number、boolean、date这样写数值。
            - name: nullValue
              type: boolean
              label: 是否将值为null的属性生成到JSON中

    - name: toArray
      type: [cola.Entity]
      label: 以数组的形式返回集合中的所有Entity

    - name: each
      type: cola.EntityList
      label: 迭代集合中的Entity
      arguments:
        - name: fn
          type: function
          label: 迭代方法
          description: |
            此方法支持一个传入参数，回调时该参数的值即是当前迭代的Entity。
            如果我们在某此回调时返回了false，那么迭代过程会就此终止，类似于在循环体中使用了break。其他任何返回值或不定义返回值，迭代过程都将继续执行。
        - name: options
          type: json
          label: 选项
          optional: true
          properties:
            - name: deleted
              type: boolean
              label: 是否转换那些被标为已删除的Entity
            - name: currenPage
              type: boolean
              label: 是否只迭代当前页中的Entity
            - name: pageNo
              type: number
              label: 是否只迭代指定的页中的Entity

- name: cola.util
  stereotype: namespace
  methods:
    - name: filter
      type: array
      label: 对一个数组或EntityList进行过滤
      arguments:
        - name: data
          type: array || cola.EntityList
          label: 要过滤的数组或EntityList
        - name: criteria
          type: stirng || object
          label: 过滤条件
          description: |
            此参数有两种定义方式：
            <ul>
              <li>
              当我们传入一个字符串时，表示用该值匹配对象中的每一个属性（如果集合中的对象本身就是一个值而非对象，那么则直接匹配该值）。
              </li>
              <li>
              如果criteria是一个JSON对象，那么我们就可以在JSON中定义更加详细的过滤规则。例如，它可能会是这个样子的...
              <code>
              {
                name: { //属性名，如果属性名为"$"表示要匹配每一个属性
                  value: "b", //要匹配的值，模糊匹配
                  caseSensitive: true //是否大小写敏感，非必须
                },
                gendar: {
                  value: "male",
                  strict: true //是否严格匹配，非必须
                }
              }
              </code>
              以上的定义表示过滤出所有name属性中带有字母b（大小写敏感）的员工一级gendar属性为male的员工。
              </li>
            </ul>

    - name: sort
      type: array
      label: 对一个数组或EntityList进行排序
      arguments:
        - name: data
          type: array || cola.EntityList
          label: 要排序的数组或EntityList
        - name: comparator
          type: stirng || object
          label: 排序条件
          description: |
            此参数有四种定义方式：
            <ul>
              <li>
              如果comparator是字符串，表示是一个属性名，即按照此属性进行排序。如果第一个字符为'+'或'-'表示正向或逆向的排序。
              例如： sort(employees, 'age') 表示按照age从小到大排序; sort(employees, '-age') 表示按照age从大到小排序。
              如果集合中数据本身就是一个值而非对象，则可以省略上面的属性名，比如： sort(names, '-') 表示逆向排序names中的值。
              </li>
              <li>
              如果comparator是一个JSON对象，那么我们就可以在JSON中定义更加详细的排序规则。例如，它可能会是这个样子的...
              <code>
              [
                { prop:"age", desc:true }, //按照age逆向排序
                { prop:"name", caseSensitive: true } //按照name排序，且大小写敏感
              ]
              </code>
              以上的定义先按照age逆向排序，再按照name排序，且大小写敏感。
              </li>
              <li>
              如果comparator为$none，表示不排序，以原始顺序返回。
              </li>
              <li>
              如果comparator为$random，表示随机排序。
              </li>
            </ul>

    - name: where
      type: array
      label: 根据给定的条件对数组或EntityList中的数据进行查询，并以数组的形式返回结果
      arguments:
        - name: data
          type: array || cola.EntityList
          label: 要过滤的数组或EntityList
        - name: criteria
          type: stirng || object
          label: 查询条件
          description: 请参考 cola.util.filter() 的criteria参数

    - name: find
      type: object || cola.Entity
      label: 根据给定的条件对数组或EntityList中的数据进行查询，并返回匹配的第一比数据
      properties:
        - name: data
          type: array || cola.EntityList
          label: 要过滤的数组或EntityList
        - name: criteria
          type: stirng || object
          label: 查询条件
          description: 请参考 cola.util.filter() 的criteria参数

    - name: buildIndex
      type: cola.EntityIndex
      label: 为一组Entity建立索引
      description: |
        如果你需要频繁的利用某中特定的条件从一组Entity中查找实例，可以考虑利用此方法提高搜索效率。
      arguments:
        - name: data
          type: cola.EntityList || cola.Entity
          label: 要索引的EntityList或Entity
        - name: property
          type: stirng
          label: 要索引的属性名
          description: 目前只支持定义一个属性名
        - name: option
          type: json
          label: 选项
          optional: true
          properties:
            - name: tree
              type: boolean || string
              label: 是否以树状结构向下钻取，为每一层的Entity建立索引
              description: |
                <li>如果不定义此选项，默认情况下此方法只为EntityList中的第一层Entity建立索引。</li>
                <li>如果定义了tree=true，此方法可以向下钻取每一层每个子属性下的Entity建立索引。</li>
                <li>如果定义了tree为属性名，此方法可以根据这个属性向下钻取每一层的Entity建立索引。</li>
                <code>
                var index = cola.util.buildIndex(model.get("employee"), "name");
                var employee = index.find("Nick");  // 查找name='Nick'的Employee对象
                </code>
